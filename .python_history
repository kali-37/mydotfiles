print(\u1F50C)
print(u"\u1F50C")
exit();
exit()
4*2.5**10
4*(2.5**10)
4*(2.5**10)/2**10
10**10*4/2**20
exit()
exec("def __PYTHON_EL_eval(source, filename):\n    import ast, sys\n    if sys.version_info[0] == 2:\n        from __builtin__ import compile, eval, globals\n    else:\n        from builtins import compile, eval, globals\n    try:\n        p, e = ast.parse(source, filename), None\n    except SyntaxError:\n        t, v, tb = sys.exc_info()\n        sys.excepthook(t, v, tb.tb_next)\n        return\n    if p.body and isinstance(p.body[-1], ast.Expr):\n        e = p.body.pop()\n    try:\n        g = globals()\n        exec(compile(p, filename, 'exec'), g, g)\n        if e:\n            return eval(compile(ast.Expression(e.value), filename, 'eval'), g, g)\n    except Exception:\n        t, v, tb = sys.exc_info()\n        sys.excepthook(t, v, tb.tb_next)")
exec("def __PYTHON_EL_eval_file(filename, tempname, delete):\n    import codecs, os, re\n    pattern = r'^[ \t\f]*#.*?coding[:=][ \t]*([-_.a-zA-Z0-9]+)'\n    with codecs.open(tempname or filename, encoding='latin-1') as file:\n        match = re.match(pattern, file.readline())\n        match = match or re.match(pattern, file.readline())\n        encoding = match.group(1) if match else 'utf-8'\n    with codecs.open(tempname or filename, encoding=encoding) as file:\n        source = file.read().encode(encoding)\n    if delete and tempname:\n        os.remove(tempname)\n    return __PYTHON_EL_eval(source, filename)")
__PYTHON_EL_eval_file("/tmp/pytlMRZP", "/tmp/pytlMRZP", True)
clear
exit
inputstring="aaba"
reversed=inputstring.sort(reversed)
inputstring.\
exit()
inp="aabaa"
print(inp[::1])
inp="aabce"
print(inp[::1])
print(inp[::-1])
print(inp[0:2:-1])
print(inp[:2:-1])
print(inp[:2:1:-1])
print(inp[:2:4:-1])
print(inp[:2:3:-1])
print(inp[1:3:-1])
print(inp[3:1:-1])
lst=[1,2,3,4,5]
print(lst[4:2:-1]
0
print(lst[4:2:-1])
exit
exit()
def solution(statues):
    return sorted(statues)[::-1]
print(solution([2,3,4]))
    return sorted(statues)[:0:-1]
@functools.lru_cache(maxsize=128)
def sorter(statues):
	return sorted[statues];
exit();
str_num = "123"
int_num = int(str_num)
print(int_num)
print(int_num//1)
print(int_num//2)
print(int_num//3)
print(str(int_num)//3)
print(len(str(int_num))//3)
print(len(str(int_num))//2)
print(len(str(i))//2)
i="123456789"
print(len(str(i))//2)
for m in map(int,i)):
for m in map(int,i):
print(m)
for m in map(int,i):
	print(m)
print(sum(map(int,i)))
for m in i:
	print(m)
clear
str="123adsfcdfre"
for s in str:
	print(s)
list=list(map(int,str))
str="1231235435345"
list=list(map(int,str))
print(list)
sum(list)
clear
exit()
numbers=[1,2,3,4,5]
print(list(filter(true,numbers)))
print(list(filter(True,numbers)))
print(list(filter(iseven,numbers)))
print(list(filter(is_even,numbers)))
print(list(filter(lambda x:x%2 ,numbers)))
print(list(filter(lambda x:x%2==0 ,numbers)))
print(list(filter(1 ,numbers)))
print(list(filter(false ,numbers)))
print(list(filter(False ,numbers)))
89*1.6
exit
exit()
a=[1,2,3,4,5]
a.remove(3)
print(a)
a=[1,2,3,4,5,3,3,3,3,3,3]
a.remove(3)
print(a)
a.remove(all(3))
from functools import partial
def solution(a):
    index_tree = list(index for index, value in enumerate(a) if value == -1)
    print(index_tree)
    removed_tree_sorted = sorted(list(filter(lambda x: x != -1, a)))
    # Use map and functools.partial to perform the insertions in one line
    removed_tree_sorted = list(map(partial(removed_tree_sorted.insert, -1), index_tree))
    
    print(removed_tree_sorted)
# Example usage
a = [1, 2, 3, -1, -1, 4, -1, 5]
solution(a)
from functools import partial
def solution(a):
    index_tree = list(index for index, value in enumerate(a) if value == -1)
    print(index_tree)
    removed_tree_sorted = sorted(list(filter(lambda x: x != -1, a)))
    # Use map and functools.partial to perform the insertions in one line
    removed_tree_sorted = list(map(partial(removed_tree_sorted.insert, -1), index_tree))
    
    print(removed_tree_sorted)
# Example usage
a = [1, 2, 3, -1, -1, 4, -1, 5]
solution(a)
exit()
def solution(s):
    for i in range(len(s)):
        if s[i] == "(":
            start = i
        if s[i] == ")":
            end = i
            return solution(s[:start] + s[start+1:end][::-1] + s[end+1:])
    return s
    print(("".join(stack)))
    return ("".join(stack))
    
"foobazrabblim"
solution("(123)")
solution("foo(bar(baz))blim")
def reverse(string):
    _tem = ''
    for i in string:
        _tem = i+_tem
    return _tem
def solution(inputString:str)->None:
    temp = ''
    stack = []
    for i in inputString:
        if i=='(':
           # print("herer   ",temp)
            stack.append(temp)
            temp = ''
        elif i==')':
            if stack:
                temp = stack.pop()+reverse(temp)
            else:
                temp = reverse(temp)
        else:
            temp+=i
           # print(stack)
    stack.append(temp)
    print(("".join(stack)))
    return ("".join(stack))
    
"foobazrabblim"
solution("(123)")
solution("foo(bar(baz))blim")
solution("fa(ba(ta)ca)(bi)hm")
solution("()")
def reverse(string):
    _tem = ''
    for i in string:
        _tem = i+_tem
    return _tem
def solution(inputString:str)->None:
    temp = ''
    stack = []
    for i in inputString:
        if i=='(':
           # print("herer   ",temp)
            stack.append(temp)
            temp = ''
        elif i==')':
            if stack:
                temp = stack.pop()+reverse(temp)
            else:
                temp = reverse(temp)
        else:
            temp+=i
           # print(stack)
    stack.append(temp)
    print(("".join(stack)))
    return ("".join(stack))
    
"foobazrabblim"
solution("(123)")
solution("foo(bar(baz))blim")
solution("fa(ba(ta)ca)(bi)hm")
solution("()")
clear
def reverse(string):
    _tem = ''
    for i in string:
        _tem = i+_tem
    return _tem
def solution(inputString:str)->None:
    temp = ''
    stack = []
    for i in inputString:
        if i=='(':
           # print("herer   ",temp)
            stack.append(temp)
            temp = ''
        elif i==')':
            if stack:
                temp = stack.pop()+reverse(temp)
            else:
                temp = reverse(temp)
        else:
            temp+=i
           # print(stack)
    stack.append(temp)
    print(("".join(stack)))
    return ("".join(stack))
    
"foobazrabblim"
solution("(123)")
solution("foo(bar(baz))blim")
solution("fa(ba(ta)ca)(bi)hm")
solution("()")
exit
exit()
import datetime
epoch_timestamp = 14474498
date = datetime.datetime.fromtimestamp(epoch_timestamp)
print(date)
datetime.datetime()
datetime.date.today()
c = datetime.date.today()
c = datetime.timedelta(epoch_timestamp)
c 
d = datetime.date.today()
c+d
print(c)
c = datetime.timedelta(second=epoch_timestamp)
c = datetime.timedelta(seconds=epoch_timestamp)
c+d
exit();
import time
exit();
picture=picture:
["abcde", 
 "fghij", 
 "klmno", 
 "pqrst", 
 "uvwxy"]
picture=['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy']
print( i   for i in picture)
print("*"*10)
txt = "banana"
x = txt.center(len(txt),"*")
print(x)
x = txt.center(len(txt),"*")
[x].center(len(txt),"*")
clear
l="abc"
l.center(5,"*")
list("abcdef")
set ("abcedf")
a=00
print(a)
exit
exit()
011
exit()
import re
int a='000'
a='000'
clear
re.findall(^0)
exit()
import re
txt = "0"
x = re.findall("\A.",txt)
print(x)
x = re.findall(".\Z",txt)
print(x)
exit()
s="00"
print(len(s))
exit()
components=['00',
components=['00','10',25']
components=['00','10','25']
print(c) for c in components
[print(c) for c in components]
[c=='0' for c in components]
[c.findall("\A.")=='0'  for c in components]
import re
[c.findall("\A.",c)=='0'  for c in components]
[re.findall("\A.",c)=='0'  for c in components]
re.findall("\A.",c)=='0'  for c in components
[re.findall("\A.",c)=='0'  for c in components]
[re.findall("\A.",c)=='0'  for c in components] ==[re.findall("\A.",c)=='0'  for c in components]
exit()
components=['00','01','20']
!([re.findall("\A.",c)=='0'] and [re.findall(".\Z")=='0'] and len(c)!='0' )
([re.findall("\A.",c)=='0'] and [re.findall(".\Z")=='0'] and len(c)!='0' )
import re
([re.findall("\A.",c)=='0'] and [re.findall(".\Z")=='0'] and len(c)!='0' )
([re.findall("\A.",c)=='0'] and [re.findall(".\Z")=='0'] and len(c)!='0' ) for c in components
[([re.findall("\A.",c)=='0'] and [re.findall(".\Z")=='0'] and len(c)!='0' ) for c in components]
[([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0' ) for c in components]
[([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0' c)]
[([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0'in  c)]
for c in components:
	 [([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0'in  c)]
for c in components:
	 [([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0'in  c)]
	 ([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0'in  c)
for c in components:
	 ([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0'in  c)
	 !([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0'in  c)
for c in components:
	 !([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0'in  c)
	 !([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0')
for c in components:
	 !([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0')
	 ([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0')
for c in components:
	 ([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!='0')
	 ([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!=='0')
for c in components:
	 ([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)!=='0')
for c in components:
	 ([re.findall("\A.",c)=='0'] and [re.findall(".\Z",c)=='0'] and len(c)=='0')
exit()
compnonent="0.254.255.0"
compnonent=compnonent.split('.')
(re.findall("\A.",c)==['0'] and len(c)==1)
import re
for c in component:
	(re.findall("\A.",c)==['0'] and len(c)==1)
for c in compnonent:
	(re.findall("\A.",c)==['0'] and len(c)==1)
import ipaddress
cat="00"
cat.isnumeric()
exit()
3%3
exit()
3%1
2%1
3%2
2%2
2%3
3%3
    
input_array = [2,3]
saturation=1
all_satisfy=False
    while not all_satisfy:
        all_satisfy = True
        print("breaked...")
        for element in inputArray:
            print(element,saturation , "before ---  elm, saturation ")
            if element % saturation == 0:
                print(element,saturation , "elm, saturation ")
                saturation += 1
                print("saturation inc",saturation)
                all_satisfy = False
                break
    return saturation
clear
exit
exit()
inputArray = [2,3]
saturation=1
all_satisfy=False
while not all_satisfy:
    all_satisfy = True
    print("breaked...")
    for element in inputArray:
        print(element,saturation , "before ---  elm, saturation ")
        if element % saturation == 0:
            print(element,saturation , "elm, saturation ")
            saturation += 1
            print("saturation inc",saturation)
            all_satisfy = False
            break
 
print(saturation)
exit()
def is_perfect_square(n):
    return int(n ** 0.5) ** 2 == n
# Example usage
num = 25
if is_perfect_square(num):
    print(f"{num} is a perfect square.")
else:
    print(f"{num} is not a perfect square.")
num = 26
import
import time
time.thread_time(seconds)
time.thread_time(inputArray)
import requests
from requests.auth import HTTPBasicAuth
response=requests.get('https://facebook.com /user,',
auth=HTTPBasicAuth('9846706367','rimal12#'))
response=requests.get('https://facebook.com /user,',auth=HTTPBasicAuth('9846706367','rimal12#'))
# import requests module
import requests
from requests.auth import HTTPBasicAuth
  
# Making a get request
response = requests.get('https://api.github.com / user, ',
            auth = HTTPBasicAuth('user', 'pass'))
  
# print request object
print(response)
requests.get("www.google.com")
exit()
import requests
print(requests.get('http://www.google.com')
)
exit()
# import requests module
import requests
  
# create a session object
s = requests.Session()
  
# make a get request
s.get('https://httpbin.org/cookies/set/sessioncookie/123456789')
  
# again make a get request
r = s.get('https://httpbin.org/cookies')
  
# check if cookie is still set
print(r.text)
exit90
exit()
